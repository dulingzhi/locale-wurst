package Locale

import HashMap
import ErrorHandling

@configurable public constant MAP_LOCALE_LANGUAGE = LocaleLanguage.enUS

public enum LocaleLanguage
    enUS
    deDE
    enGB
    esES
    frFR
    itIT
    koKR
    plPL
    ruRU
    zhCN
    zhTW

class LocalePrivate extends HashMap<string, string>
    private LocaleLanguage mLang
    private bool mReadOnly = false
    private static let mApplications = new HashMap<string, HashMap<LocaleLanguage, LocalePrivate>>
    private bool mSilent = true

    construct(LocaleLanguage lang)
        mLang = lang

    override function get(string key) returns string
        if super.has(key)
            let value = super.get(key)
            if value.isNotBlank()
                return value
        else if not mSilent
            error("Locale-wurst: key \"{0}\" isn`t exists.".format(key))
                
        return key

    override function put(string key, string value)
        if not mReadOnly
            super.put(key, value)
    
    function setReadOnly(bool enable)
        mReadOnly = enable

    function setSilent(bool enable)
        mSilent = enable
    
    static function newLocale(string app, LocaleLanguage lang) returns LocalePrivate
        if not mApplications.has(app)
            mApplications.put(app, new HashMap<LocaleLanguage, LocalePrivate>)
        
        let data = mApplications.get(app)
        if not data.has(lang)
            data.put(lang, new LocalePrivate(lang))
        
        return data.get(lang)


public function newLocale(string app, LocaleLanguage lang, bool silent) returns LocalePrivate
    return LocalePrivate.newLocale(app, lang)
        ..setReadOnly(false)
        ..setSilent(silent)

public function getLocale(string app, LocaleLanguage lang) returns LocalePrivate
    return LocalePrivate.newLocale(app, lang)
        ..setReadOnly(true)
    
public function isLanguage(LocaleLanguage lang) returns bool
    return MAP_LOCALE_LANGUAGE == lang
