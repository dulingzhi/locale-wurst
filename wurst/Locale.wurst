package Locale

import HashMap

constant let s_Applications = new HashMap<string, HashMap<LocaleLanguage, LocalePrivate>>
@configurable let g_MapLanguage = LocaleLanguage.enUS

public enum LocaleLanguage
    zhCN
    enUS

class LocalePrivate extends HashMap<string, string>
    private LocaleLanguage m_lang
    private bool m_readOnly = false

    construct(LocaleLanguage lang)
        m_lang = lang

    override function get(string key) returns string
        if super.has(key)
            return super.get(key)
        return key

    override function put(string key, string value)
        if not m_readOnly
            super.put(key, value)
    
    function setReadOnly(bool enable)
        m_readOnly = enable


public function newLocale(string app, LocaleLanguage lang) returns LocalePrivate
    if not s_Applications.has(app)
        s_Applications.put(app, new HashMap<LocaleLanguage, LocalePrivate>)
    
    let data = s_Applications.get(app)
    if not data.has(lang)
        data.put(lang, new LocalePrivate(lang))
    
    return data.get(lang)
        ..setReadOnly(false)

public function getLocale(string app, LocaleLanguage lang) returns LocalePrivate
    return newLocale(app, lang)
        ..setReadOnly(true)
    
public function isLanguage(LocaleLanguage lang) returns bool
    return g_MapLanguage == lang
